import Koa from "koa";
import createClientConfig from "../build/client.conf";
import createServerConf from "../build/server.conf";
import { ab } from "../build/utils";
import { readFileSync } from "fs";
import path from "path";
import webpack from "webpack";
import MemoryFs from "memory-fs";
import {
  BundleRendererOptions,
  createBundleRenderer,
} from "vue-server-renderer";
import koaWebpack from "koa-webpack";
import LRU from "lru-cache";

export function setupDevServer(app: Koa, cb: Function) {
  return new Promise<void>((resolve) => {
    let clientManifest: object;
    let bundle: object;

    function update() {
      if (bundle && clientManifest) {
        cb(bundle, {
          clientManifest,
        });
        resolve();
      }
    }

    // * 处理客户端打包 更新获取manifest
    const clientConfig = createClientConfig();
    const clientCompiler = webpack(clientConfig);
    koaWebpack({
      compiler: clientCompiler,
      devMiddleware: {
        publicPath: clientConfig.output?.publicPath,
      },
    }).then((middleware) => app.use(middleware));

    clientCompiler.hooks.done.tap("dev-plugin", (stats) => {
      const result = stats.toJson();
      result.errors.forEach((err: any) => console.error(err));
      result.warnings.forEach((warn: any) => console.warn(warn));

      if (result.errors.length) return;

      clientManifest = JSON.parse(
        readFile(
          clientCompiler.outputFileSystem,
          clientConfig.output?.path!,
          "vue-ssr-client-manifest.json"
        )
      );
      update();
    });

    // * 处理服务端 更新获取bundle
    const serverConfig = createServerConf();
    const serverCompiler = webpack(serverConfig);
    const mfs = new MemoryFs();
    serverCompiler.outputFileSystem = mfs;
    serverCompiler.watch({}, (err, stats) => {
      if (err) throw err;
      const result = stats.toJson();
      if (result.errors.length) return;

      // read bundle generated by vue-ssr-webpack-plugin
      bundle = JSON.parse(
        readFile(
          serverCompiler.outputFileSystem,
          serverConfig.output?.path!,
          "vue-ssr-server-bundle.json"
        )
      );
      update();
    });
  });
}

export function createSSRRender() {
  const bundle = require("../dist/vue-ssr-server-bundle.json");
  const clientManifest = require("../dist/vue-ssr-client-manifest.json");
  const renderer = createRenderer(bundle, { clientManifest });
  return renderer;
}

export function createRenderer(
  bundle: string | object,
  options: BundleRendererOptions
) {
  return createBundleRenderer(
    bundle,
    Object.assign(options, {
      template: readFileSync(ab("./src/index.html"))?.toString(),
      runInNewContext: false,
      basedir: ab("./dist"),
      caches: new LRU({
        max: 10000,
        maxAge: 1000,
      }),
    })
  );
}

function readFile(fs: any, rootPath: string, file: string) {
  try {
    return fs.readFileSync(path.join(rootPath, file), "utf-8");
  } catch (e) {
    console.warn(e);
  }
}
